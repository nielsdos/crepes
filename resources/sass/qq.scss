/**
Copyright (c) 2022 by jakob-e (https://codepen.io/jakob-e/pen/wgGpeP)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 */
@mixin qq($query) {
    $eq:  index-some($query, equal, exactly);
    $min: index-some($query, min, least, from) or $eq;
    $min: if($min, nth($query, $min + 1), null);
    $max: index-some($query, max, most, to) or $eq;
    $max: if($max, nth($query, $max + 1), null);

    $list:();
    $last: null;
    //  loop through selectors to find the last selector of each part
    //  the "alphabet" loop is just a simple way to listify selectors
    //  (if the selector has more than 26 parts â€“ you're on your own)
    @each $selector in & {
        @each $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, $s, $t, $u, $v, $w, $x, $y, $z in $selector {
            $list: append($list, $a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z);
        }
        $last: nth($list, length($list));
    }

    @if $min and $max {
        &:nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child,
        &:nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child ~ #{$last} { @content; }
    }
    @else if $min {
        &:nth-last-child(n+#{$min}),
        &:nth-last-child(n+#{$min}) ~ #{$last} { @content; }
    }
    @else if $max {
        &:nth-last-child(-n+#{$max}):first-child,
        &:nth-last-child(-n+#{$max}):first-child ~ #{$last} { @content; }
    }
}
//  helper function to return the first found list index
//  of a number of values passed
@function index-some($list, $values...){
    @each $value in $values { @if index($list, $value){ @return index($list, $value); } }
    @return null;
}
