<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crepes – Documentation</title><link>https://nielsdos.github.io/crepes/docs/</link><description>Recent content in Documentation on Crepes</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://nielsdos.github.io/crepes/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Contribution Guidelines For Documentation</title><link>https://nielsdos.github.io/crepes/docs/contribution-guidelines/contributing-to-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/contribution-guidelines/contributing-to-docs/</guid><description>
&lt;p>We use &lt;a href="https://gohugo.io/">Hugo&lt;/a> to format and generate our website and the
&lt;a href="https://github.com/google/docsy">Docsy&lt;/a> theme for styling and site structure.
Hugo is an open-source static site generator that provides us with templates,
content organisation in a standard directory structure, and a website generation
engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.&lt;/p>
&lt;p>All submissions, including submissions by project members, require review. We
use GitHub pull requests for this purpose. Consult
&lt;a href="https://help.github.com/articles/about-pull-requests/">GitHub Help&lt;/a> for more
information on using pull requests.&lt;/p>
&lt;h2 id="updating-a-single-page">Updating a single page&lt;/h2>
&lt;p>If you&amp;rsquo;ve just spotted something you&amp;rsquo;d like to change while using the docs, Docsy has a shortcut for you:&lt;/p>
&lt;ol>
&lt;li>Click &lt;strong>Edit this page&lt;/strong> in the top right hand corner of the page.&lt;/li>
&lt;li>If you don&amp;rsquo;t already have an up to date fork of the project repo, you are prompted to get one - click &lt;strong>Fork this repository and propose changes&lt;/strong> or &lt;strong>Update your Fork&lt;/strong> to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode.&lt;/li>
&lt;/ol>
&lt;h2 id="previewing-your-changes-locally">Previewing your changes locally&lt;/h2>
&lt;p>If you want to run your own local Hugo server to preview your changes as you work:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Follow the instructions in &lt;a href="https://nielsdos.github.io/crepes/docs/getting-started">Getting started&lt;/a> to install Hugo and any other tools you need. You&amp;rsquo;ll need at least &lt;strong>Hugo version 0.105&lt;/strong> (we recommend using the most recent available version), and it must be the &lt;strong>extended&lt;/strong> version, which supports SCSS.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Fork the &lt;a href="https://github.com/nielsdos/crepes-docs">documentation repo&lt;/a> repo into your own project, then create a local copy using &lt;code>git clone&lt;/code>. Don’t forget to use &lt;code>--recurse-submodules&lt;/code> or you won’t pull down some of the code you need to generate a working site.&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone --recurse-submodules --depth 1 https://github.com/nielsdos/crepes-docs.git
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Run &lt;code>hugo server&lt;/code> in the site root directory. By default your site will be available at http://localhost:1313/. Now that you&amp;rsquo;re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Continue with the usual GitHub workflow to edit files, commit them, push the
changes up to your fork, and create a pull request.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="creating-an-issue">Creating an issue&lt;/h2>
&lt;p>If you&amp;rsquo;ve found a problem in the docs, but you&amp;rsquo;re not sure how to fix it yourself, please create an issue in the &lt;a href="https://github.com/nielsdos/crepes-docs/issues">documentation repo&lt;/a>. You can also create an issue about a specific page by clicking the &lt;strong>Create Issue&lt;/strong> button in the top right hand corner of the page.&lt;/p>
&lt;h2 id="useful-resources">Useful resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.docsy.dev/docs/">Docsy user guide&lt;/a>: All about Docsy, including how it manages navigation, look and feel, and multi-language support.&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/documentation/">Hugo documentation&lt;/a>: Comprehensive reference for Hugo.&lt;/li>
&lt;li>&lt;a href="https://guides.github.com/activities/hello-world/">Github Hello World!&lt;/a>: A basic introduction to GitHub concepts and workflow.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Contribution Guidelines For The Project</title><link>https://nielsdos.github.io/crepes/docs/contribution-guidelines/contributing-to-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/contribution-guidelines/contributing-to-project/</guid><description>
&lt;p>Please always target the &lt;code>develop&lt;/code> branch in your pull requests.&lt;/p>
&lt;p>If you don&amp;rsquo;t know where to start, you can always try to look at the open issues in the repository to find missing features or bugs that should be fixed.&lt;/p>
&lt;p>If you don&amp;rsquo;t have a particular feature of bugfix in mind, but would still like to make a contribution, you can always check the roadmap and work on something you feel is missing from the project.&lt;/p>
&lt;h2 id="setting-up-a-development-environment">Setting up a development environment&lt;/h2>
&lt;p>You can follow the same installation instructions for a production environment, except for the following changes.&lt;/p>
&lt;h3 id="updating-env">Updating &lt;code>.env&lt;/code>&lt;/h3>
&lt;p>It is recommended to change the &lt;code>.env&lt;/code> file to have the following properties set:&lt;/p>
&lt;pre tabindex="0">&lt;code>APP_ENV=development
APP_DEBUG=true
&lt;/code>&lt;/pre>&lt;h3 id="installing-development-dependencies">Installing development dependencies&lt;/h3>
&lt;p>Do &lt;em>not&lt;/em> pass &lt;code>--no-dev&lt;/code> to the composer install command line:&lt;/p>
&lt;pre tabindex="0">&lt;code>composer install
&lt;/code>&lt;/pre>&lt;p>Front-end dependencies can be installed with:&lt;/p>
&lt;pre tabindex="0">&lt;code>yarn install
&lt;/code>&lt;/pre>&lt;h2 id="developing">Developing&lt;/h2>
&lt;p>You can start the built-in Laravel server using:&lt;/p>
&lt;pre tabindex="0">&lt;code>php artisan serve
&lt;/code>&lt;/pre>&lt;p>To make changes to the front-end JavaScript and CSS code, you should be using:&lt;/p>
&lt;pre tabindex="0">&lt;code>yarn watch
&lt;/code>&lt;/pre>&lt;p>to watch for changes and automatically rebuild the affected front-end files.&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>We use PHPUnit as our testing framework with a test database called &lt;code>courses_testing&lt;/code>. Make sure to setup an empty database with that name in order to run the tests. Please make sure to include regression tests if you are fixing a bug, or feature tests when adding a new feature.&lt;/p>
&lt;p>To run the tests, use:&lt;/p>
&lt;pre tabindex="0">&lt;code>vendor/bin/phpunit
&lt;/code>&lt;/pre>&lt;p>If you wish to generate a coverage report whilst running the tests, you can use:&lt;/p>
&lt;pre tabindex="0">&lt;code>php artisan view:clear;XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-html reports
&lt;/code>&lt;/pre>&lt;h2 id="static-analysis">Static analysis&lt;/h2>
&lt;p>We use the PHPStan static analyser tool to find bugs earlier. We recommend that you run the tool and fix any errors that pop up by your changes before opening a pull request.&lt;/p>
&lt;p>To run the tool you can use:&lt;/p>
&lt;pre tabindex="0">&lt;code>vendor/bin/phpstan analyse --memory-limit=1G
&lt;/code>&lt;/pre></description></item><item><title>Docs: System Requirements</title><link>https://nielsdos.github.io/crepes/docs/getting-started/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/getting-started/requirements/</guid><description>
&lt;p>The requirements are fairly standard for a web server running PHP, also on shared hosting.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Requirement&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Details&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Composer&lt;/td>
&lt;td>&amp;gt;= 2.2&lt;/td>
&lt;td>Composer is the back-end package manager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HTTP server&lt;/td>
&lt;td>&lt;/td>
&lt;td>Examples: nginx, Apache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PHP&lt;/td>
&lt;td>&amp;gt;= 8.1&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PHP extensions&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;ul>&lt;li>BCMath&lt;/li>&lt;li>GD&lt;/li>&lt;li>JSON&lt;/li>&lt;li>Mbstring&lt;/li>&lt;li>OpenSSL&lt;/li>&lt;li>PDO&lt;/li>&lt;li>XML&lt;/li>&lt;/ul>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SQL database&lt;/td>
&lt;td>&lt;/td>
&lt;td>Examples: MySQL, MariaDB, PostgreSQL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Yarn&lt;/td>
&lt;td>&amp;gt;= 1.20&lt;/td>
&lt;td>Yarn is the front-end package manager. This is strictly not necessary to install on the server as you can build the front-end assets locally as well.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: A Note on Shared Hosting</title><link>https://nielsdos.github.io/crepes/docs/getting-started/a_note_on_shared_hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/getting-started/a_note_on_shared_hosting/</guid><description>
&lt;p>The document root of the application is the public folder.
Do &lt;em>not&lt;/em> place the whole application in the document root, or otherwise your risk creating security issues!
It is especially dangerous if the environment file &lt;code>.env&lt;/code> is readable by the outside world because it contains application secrets.&lt;/p>
&lt;p>The safe way to set up a Laravel application (like this application is) on shared hosting is by placing the whole application directory &lt;em>outside&lt;/em> of the document root in a dedicated folder. For example you can name that folders &lt;code>crepes&lt;/code>.
The files in the &lt;code>public&lt;/code> folder should be the ones placed in the document root.&lt;/p>
&lt;p>You then need to make a few modifications to &lt;code>public/index.php&lt;/code> in order to accomodate for the changed application directory structure. In particular lines 10 and 11 need changes. The code initially looks like this:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">require&lt;/span> &lt;span style="color:#000">__DIR__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/../vendor/autoload.php&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$app&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">require_once&lt;/span> &lt;span style="color:#000">__DIR__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/../bootstrap/app.php&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If your document root is at &lt;code>/public_html&lt;/code>, and the application code is at &lt;code>/crepes&lt;/code>, you should change the code to:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">require&lt;/span> &lt;span style="color:#000">__DIR__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/../crepes/vendor/autoload.php&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$app&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">require_once&lt;/span> &lt;span style="color:#000">__DIR__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;/../crepes/bootstrap/app.php&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Installation</title><link>https://nielsdos.github.io/crepes/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/getting-started/installation/</guid><description>
&lt;p>This page will guide you on how to install the dependencies for the application.&lt;/p>
&lt;h2 id="download-the-application-source-code">Download the application source code&lt;/h2>
&lt;p>The first step is to get a copy of the source code to the machine you want to deploy to.
At this moment, the only way to obtain it is via a git clone or download from the repository.
In the future we might add a way to install it via composer directly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/nielsdos/crepes installation-directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> installation-directory&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="application-dependencies">Application dependencies&lt;/h2>
&lt;p>We use the Composer package manager to manage our back-end (PHP) dependencies, while Yarn is used for the front-end dependencies.&lt;/p>
&lt;h3 id="back-end-dependencies">Back-end dependencies&lt;/h3>
&lt;p>Install the dependencies for production as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>composer install --no-dev&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;blockquote>
&lt;p>If you&amp;rsquo;re setting up a development environment, you should not pass the &lt;code>--no-dev&lt;/code> option.&lt;/p>
&lt;/blockquote>
&lt;h3 id="front-end-dependencies">Front-end dependencies&lt;/h3>
&lt;p>Install the dependencies and build the front-end assets as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yarn install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn prod&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;blockquote>
&lt;p>If you&amp;rsquo;re setting up a development environment, you can use &lt;code>yarn dev&lt;/code> instead of &lt;code>yarn prod&lt;/code>. You can also use the watch option to automatically rebuild front-end assets upon changes with &lt;code>yarn watch&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Configuration</title><link>https://nielsdos.github.io/crepes/docs/getting-started/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/getting-started/configuration/</guid><description>
&lt;p>This page will guide you on how to configure the application.&lt;/p>
&lt;h2 id="creating-an-environment-file-env">Creating an environment file (&lt;code>.env&lt;/code>)&lt;/h2>
&lt;p>The configuration settings are stored within the &lt;code>.env&lt;/code> file.
To create one you should copy the example file &lt;code>.env.example&lt;/code> to &lt;code>.env&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Make sure that the .env file is &lt;em>never&lt;/em> accessible by the outside world: it contains application secrets such as your database password!&lt;/p>
&lt;/blockquote>
&lt;h2 id="editing-the-environment-file">Editing the environment file&lt;/h2>
&lt;p>You should modify the .env file to configure the application. This includes settings for the database, reCAPTCHA settings, and email settings. In particular, the following keys should be at least set-up:&lt;/p>
&lt;ul>
&lt;li>&lt;code>APP_URL&lt;/code> should point to the public URL where your application is hosted, without trailing slash&lt;/li>
&lt;li>&lt;code>MAIL_*&lt;/code>&lt;/li>
&lt;li>&lt;code>DB_*&lt;/code>&lt;/li>
&lt;li>&lt;code>NOCAPTCHA_*&lt;/code>, for reCAPTCHA
To get reCAPTCHA keys, please use the &lt;a href="https://www.google.com/recaptcha/admin/create">reCAPTCHA admin console&lt;/a> and select reCAPTCHA v2.&lt;/li>
&lt;/ul>
&lt;p>You can furthermore also specify your desired time zone, locale, etc.&lt;/p>
&lt;p>If you wish to modify the URLs from the default course to event (or something else entirely), you can modify the following entries:&lt;/p>
&lt;ul>
&lt;li>&lt;code>APP_ROUTE_CUSTOMIZED_NAMES_COURSE&lt;/code>&lt;/li>
&lt;li>&lt;code>APP_ROUTE_CUSTOMIZED_NAMES_SUBSCRIPTIONS&lt;/code>&lt;/li>
&lt;li>&lt;code>APP_ROUTE_CUSTOMIZED_NAMES_SUBSCRIBE&lt;/code>&lt;/li>
&lt;li>&lt;code>APP_ROUTE_CUSTOMIZED_NAMES_UNSUBSCRIBE&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="generating-the-application-key">Generating the application key&lt;/h2>
&lt;p>Finally, you should generate an application key. The application key is used to perform encryption and decryption routines within the application. It is also stored in the &lt;code>.env&lt;/code> file.
You should only generate this once, and never change it again later &lt;em>unless&lt;/em> the key gets leaked. If you regenerate the key, all sessions and signed URLs will become invalid.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>php artisan key:generate&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="setting-up-the-database">Setting up the database&lt;/h2>
&lt;p>The database schema is handled via migrations. These are scripts that build or upgrade your database schema incrementally in a way that can also be rolled back. If you&amp;rsquo;re interested you can read more about them in the &lt;a href="https://laravel.com/docs/9.x/migrations">Laravel documentation&lt;/a>.&lt;/p>
&lt;p>If your database settings are correct, you should run the following command to set-up the database.
Make sure your database actually exists as this will not be created by the script!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>php artisan migrate&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Every time you upgrade the application you should re-run the above command to make sure your database schema is always the latest version.&lt;/p>
&lt;h2 id="caching">Caching&lt;/h2>
&lt;p>To improve the performance of the application, the configuration, routes, views and icons should be cached.
You can easily to this by executing the optimize command, which internally performs the following caching commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>php artisan config:cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>php artisan route:cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>php artisan icons:cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>php artisan view:cache&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="creating-an-administrator-user">Creating an administrator user&lt;/h2>
&lt;p>There are no initial users provided by the application. You should therefore create an initial administrator user.
You can do so by executing the following command and following the instructions on your screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>php artisan crepes:create-user&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="next-steps">Next steps&lt;/h2>
&lt;p>Your application should now be set up and you should be able to visit the public URL and see it in action!
The next step is to set-up the cronjobs and use your administrator account to create some content.&lt;/p></description></item><item><title>Docs: Cronjobs</title><link>https://nielsdos.github.io/crepes/docs/getting-started/cronjobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nielsdos.github.io/crepes/docs/getting-started/cronjobs/</guid><description>
&lt;p>Cronjobs are a way to automatically execute scheduled commands.
They are used in the application to run jobs from the queue such as sending notification emails, and also to send reminders.&lt;/p>
&lt;h2 id="a-note-on-the-queue">A note on the queue&lt;/h2>
&lt;p>If you plan on listening to the queue using Laravel&amp;rsquo;s built-in tools instead of using a scheduled job, you can use the following command instead of setting up a cronjob &lt;em>for the queue&lt;/em>. A cronjob to send reminders is still necessary.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>php artisan queue:listen&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="cronjob-configuration">Cronjob configuration&lt;/h2>
&lt;p>The following two jobs should be run:&lt;/p>
&lt;ul>
&lt;li>&lt;code>php artisan queue:work --stop-when-empty --tries=5&lt;/code>&lt;/li>
&lt;li>&lt;code>php artisan crepes:send-reminders&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>An example crontab configuration could look like:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-crontab" data-lang="crontab">0 10 * * * cd installation_directory &amp;amp;&amp;amp; php artisan subreminders:send &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1
*/20 * * * * cd installation_directory &amp;amp;&amp;amp; php artisan queue:work --stop-when-empty --tries=5 &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>Make sure to replace &lt;code>installation_directory&lt;/code> with your installation directory!&lt;/p>
&lt;/blockquote></description></item></channel></rss>